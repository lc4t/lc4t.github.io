---
import { CollectionEntry, getCollection } from "astro:content";
import Records from "@layouts/Records.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getPageNumbers from "@utils/getPageNumbers";
import slugify from "@utils/slugify";

export interface Props {
  post: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const posts = await getCollection(
    "blog",
    ({ data, id }) => !data.draft && id.startsWith("record/")
  );

  const postResult = posts.map(post => ({
    params: { slug: slugify(post.data) },
    props: { post },
  }));

  const pagePaths = getPageNumbers(posts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

// const { slug } = Astro.params;
const { post } = Astro.props;

const journals = await getCollection(
  "blog",
  a => a.slug.startsWith("record/journal/") && !a.data.draft
);

journals.sort(
  (a, b) => b.data.pubDatetime.getTime() - a.data.pubDatetime.getTime()
);

const lists = await getCollection(
  "blog",
  a => a.slug.startsWith("record/list/") && !a.data.draft
);

lists.sort(
  (a, b) => b.data.pubDatetime.getTime() - a.data.pubDatetime.getTime()
);
---

{
  post ? (
    <PostDetails post={post} />
  ) : (
    <Records journals={journals} lists={lists} />
  )
}
